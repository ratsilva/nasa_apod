// Mocks generated by Mockito 5.4.4 from annotations
// in storage_service/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:storage_service/src/storage/hive/path_provider.dart' as _i5;
import 'package:storage_service/src/storage/key_value_storage.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [KeyValueStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyValueStorage extends _i1.Mock implements _i3.KeyValueStorage {
  @override
  _i4.Future<Map<String, dynamic>> put(
    Map<String, dynamic>? value,
    String? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            value,
            key,
          ],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
        returnValueForMissingStub:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}

/// A class which mocks [PathProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProvider extends _i1.Mock implements _i5.PathProvider {
  @override
  _i4.Future<_i2.Directory> getDocumentsDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getDocumentsDirectory,
          [],
        ),
        returnValue: _i4.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getDocumentsDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getDocumentsDirectory,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Directory>);

  @override
  _i4.Future<_i2.Directory> getApplicationSupportDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationSupportDirectory,
          [],
        ),
        returnValue: _i4.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getApplicationSupportDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getApplicationSupportDirectory,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Directory>);

  @override
  _i4.Future<_i2.Directory> getTemporaryDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getTemporaryDirectory,
          [],
        ),
        returnValue: _i4.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getTemporaryDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getTemporaryDirectory,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Directory>);
}
