// Mocks generated by Mockito 5.4.4 from annotations
// in nasa_picture_presentation/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:core_architecture/core_architecture.dart' as _i9;
import 'package:core_foundation/core_foundation.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nasa_picture_domain/nasa_picture_domain.dart' as _i5;
import 'package:nasa_picture_domain/src/entity/nasa_picture.dart' as _i7;
import 'package:nasa_picture_domain/src/repository/nasa_picture_repository.dart'
    as _i8;
import 'package:nasa_picture_presentation/src/detail/bloc/nasa_picture_detail_bloc.dart'
    as _i12;
import 'package:nasa_picture_presentation/src/detail/bloc/nasa_picture_detail_event.dart'
    as _i13;
import 'package:nasa_picture_presentation/src/detail/bloc/nasa_picture_detail_state.dart'
    as _i3;
import 'package:nasa_picture_presentation/src/list/bloc/nasa_picture_list_bloc.dart'
    as _i10;
import 'package:nasa_picture_presentation/src/list/bloc/nasa_picture_list_event.dart'
    as _i11;
import 'package:nasa_picture_presentation/src/list/bloc/nasa_picture_list_state.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNasaPictureListState_0 extends _i1.SmartFake
    implements _i2.NasaPictureListState {
  _FakeNasaPictureListState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNasaPictureDetailState_1 extends _i1.SmartFake
    implements _i3.NasaPictureDetailState {
  _FakeNasaPictureDetailState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSink_2<S> extends _i1.SmartFake implements _i4.StreamSink<S> {
  _FakeStreamSink_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NasaPictureGetListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaPictureGetListUseCase extends _i1.Mock
    implements _i5.NasaPictureGetListUseCase {
  @override
  _i4.Stream<_i6.Result<List<_i7.NasaPicture>, _i8.NasaPictureGetListException>>
      call(_i4.StreamController<bool>? params) => (super.noSuchMethod(
            Invocation.method(
              #call,
              [params],
            ),
            returnValue: _i4.Stream<
                _i6.Result<List<_i7.NasaPicture>,
                    _i8.NasaPictureGetListException>>.empty(),
            returnValueForMissingStub: _i4.Stream<
                _i6.Result<List<_i7.NasaPicture>,
                    _i8.NasaPictureGetListException>>.empty(),
          ) as _i4.Stream<
              _i6
              .Result<List<_i7.NasaPicture>, _i8.NasaPictureGetListException>>);
}

/// A class which mocks [NasaPictureGetUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaPictureGetUseCase extends _i1.Mock
    implements _i5.NasaPictureGetUseCase {
  @override
  _i4.Stream<_i6.Result<_i7.NasaPicture, _i8.NasaPictureGetException>> call(
          DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [date],
        ),
        returnValue: _i4.Stream<
            _i6.Result<_i7.NasaPicture, _i8.NasaPictureGetException>>.empty(),
        returnValueForMissingStub: _i4.Stream<
            _i6.Result<_i7.NasaPicture, _i8.NasaPictureGetException>>.empty(),
      ) as _i4
          .Stream<_i6.Result<_i7.NasaPicture, _i8.NasaPictureGetException>>);
}

/// A class which mocks [SearchEngine].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchEngine extends _i1.Mock
    implements _i9.SearchEngine<_i7.FilterableNasaPicture> {
  @override
  List<_i7.FilterableNasaPicture> matches(
    String? searchTerm,
    List<_i7.FilterableNasaPicture>? candidates,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #matches,
          [
            searchTerm,
            candidates,
          ],
        ),
        returnValue: <_i7.FilterableNasaPicture>[],
        returnValueForMissingStub: <_i7.FilterableNasaPicture>[],
      ) as List<_i7.FilterableNasaPicture>);
}

/// A class which mocks [NasaPictureListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaPictureListBloc extends _i1.Mock
    implements _i10.NasaPictureListBloc {
  @override
  _i2.NasaPictureListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNasaPictureListState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNasaPictureListState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.NasaPictureListState);

  @override
  _i4.Stream<_i2.NasaPictureListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.NasaPictureListState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.NasaPictureListState>.empty(),
      ) as _i4.Stream<_i2.NasaPictureListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void add(_i11.NasaPictureListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.NasaPictureListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.NasaPictureListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i11.NasaPictureListEvent>(
    _i9.EventHandler<E, _i2.NasaPictureListState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i9.Transition<_i11.NasaPictureListEvent, _i2.NasaPictureListState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i9.Change<_i2.NasaPictureListState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NasaPictureDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNasaPictureDetailBloc extends _i1.Mock
    implements _i12.NasaPictureDetailBloc {
  @override
  _i3.NasaPictureDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNasaPictureDetailState_1(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeNasaPictureDetailState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.NasaPictureDetailState);

  @override
  _i4.Stream<_i3.NasaPictureDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.NasaPictureDetailState>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i3.NasaPictureDetailState>.empty(),
      ) as _i4.Stream<_i3.NasaPictureDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i13.NasaPictureDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i13.NasaPictureDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.NasaPictureDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i13.NasaPictureDetailEvent>(
    _i9.EventHandler<E, _i3.NasaPictureDetailState>? handler, {
    _i9.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i9.Transition<_i13.NasaPictureDetailEvent,
                  _i3.NasaPictureDetailState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i9.Change<_i3.NasaPictureDetailState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StreamController].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamController extends _i1.Mock
    implements _i4.StreamController<bool> {
  @override
  set onListen(void Function()? _onListen) => super.noSuchMethod(
        Invocation.setter(
          #onListen,
          _onListen,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onPause(void Function()? _onPause) => super.noSuchMethod(
        Invocation.setter(
          #onPause,
          _onPause,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onResume(void Function()? _onResume) => super.noSuchMethod(
        Invocation.setter(
          #onResume,
          _onResume,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onCancel(_i4.FutureOr<void> Function()? _onCancel) => super.noSuchMethod(
        Invocation.setter(
          #onCancel,
          _onCancel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<bool> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<bool>.empty(),
        returnValueForMissingStub: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.StreamSink<bool> get sink => (super.noSuchMethod(
        Invocation.getter(#sink),
        returnValue: _FakeStreamSink_2<bool>(
          this,
          Invocation.getter(#sink),
        ),
        returnValueForMissingStub: _FakeStreamSink_2<bool>(
          this,
          Invocation.getter(#sink),
        ),
      ) as _i4.StreamSink<bool>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListener => (super.noSuchMethod(
        Invocation.getter(#hasListener),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<dynamic> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  void add(bool? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> addStream(
    _i4.Stream<bool>? source, {
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [source],
          {#cancelOnError: cancelOnError},
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
